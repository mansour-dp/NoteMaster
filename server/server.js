const express = require("express");
const cors = require("cors");
const fs = require("fs-extra");
const path = require("path");
const axios = require("axios");
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());

// Dossiers pour stocker les donn√©es
const DATA_DIR = path.join(__dirname, "data");
const NOTES_DIR = path.join(DATA_DIR, "notes");
const QUESTIONS_DIR = path.join(DATA_DIR, "questions");
const STATS_DIR = path.join(DATA_DIR, "stats");
const QUIZ_HISTORY_DIR = path.join(DATA_DIR, "quiz-history");

// Cr√©er les dossiers s'ils n'existent pas
fs.ensureDirSync(NOTES_DIR);
fs.ensureDirSync(QUESTIONS_DIR);
fs.ensureDirSync(STATS_DIR);
fs.ensureDirSync(QUIZ_HISTORY_DIR);

// Configuration API IA
const AI_PROVIDER = process.env.AI_PROVIDER || "fallback";
const GROQ_API_URL = "https://api.groq.com/openai/v1/chat/completions";
const GROQ_API_KEY = process.env.GROQ_API_KEY;

// Helper function pour appeler l'API IA (Groq)
async function callAIAPI(messages, maxTokens = 1000) {
  try {
    let response;

    if (AI_PROVIDER === "groq" && GROQ_API_KEY) {
      // Utiliser Groq
      response = await axios.post(
        GROQ_API_URL,
        {
          model: "llama3-8b-8192", // Mod√®le Llama gratuit et performant
          messages: messages,
          max_tokens: maxTokens,
          temperature: 0.7,
        },
        {
          headers: {
            Authorization: `Bearer ${GROQ_API_KEY}`,
            "Content-Type": "application/json",
          },
        }
      );
    } else {
      throw new Error("Aucune API IA configur√©e");
    }

    return response.data.choices[0].message.content;
  } catch (error) {
    console.error("Erreur API IA:", error.response?.data || error.message);

    if (error.response?.data?.error?.message?.includes("invalid")) {
      throw new Error("Cl√© API invalide. V√©rifiez votre cl√© dans server/.env");
    }

    if (
      error.response?.data?.error?.message?.includes("Insufficient Balance")
    ) {
      throw new Error(
        "Solde insuffisant. Rechargez votre compte ou utilisez Groq (gratuit)"
      );
    }

    throw new Error("Erreur lors de l'appel √† l'API IA");
  }
}

// Test de la cl√© API au d√©marrage
async function testAIAPI() {
  if (AI_PROVIDER === "groq") {
    if (!GROQ_API_KEY || GROQ_API_KEY === "your_groq_api_key_here") {
      console.warn("‚ö†Ô∏è  ATTENTION: Cl√© API Groq non configur√©e!");
      console.warn(
        "üîÑ L'application fonctionnera en mode fallback uniquement."
      );
      return false;
    }
  }

  try {
    console.log(`üß™ Test de la cl√© API ${AI_PROVIDER.toUpperCase()}...`);
    await callAIAPI(
      [{ role: "user", content: 'Dites juste "test r√©ussi"' }],
      10
    );
    console.log(`‚úÖ Cl√© API ${AI_PROVIDER.toUpperCase()} valide!`);
    return true;
  } catch (error) {
    if (error.message.includes("Insufficient Balance")) {
      console.error("‚ùå Solde insuffisant sur votre compte!");
      console.warn("ÔøΩ Essayez Groq (gratuit) : https://console.groq.com/");
      console.warn(
        "üîÑ L'application fonctionnera en mode fallback uniquement."
      );
    } else {
      console.error(
        `‚ùå Test API ${AI_PROVIDER.toUpperCase()} √©chou√©:`,
        error.message
      );
    }
    return false;
  }
}

// Routes pour les notes

// GET /notes - R√©cup√©rer toutes les notes
app.get("/notes", async (req, res) => {
  try {
    const files = await fs.readdir(NOTES_DIR);
    const notes = [];

    for (const file of files) {
      if (file.endsWith(".txt")) {
        const title = path.basename(file, ".txt");
        const content = await fs.readFile(path.join(NOTES_DIR, file), "utf8");
        notes.push({ title, content });
      }
    }

    res.json(notes);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des notes:", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
});

// POST /notes - Cr√©er une nouvelle note
app.post("/notes", async (req, res) => {
  try {
    const { title, content } = req.body;

    if (!title || !content) {
      return res.status(400).json({ error: "Titre et contenu requis" });
    }

    const filename = `${title}.txt`;
    const filepath = path.join(NOTES_DIR, filename);

    await fs.writeFile(filepath, content, "utf8");

    res.json({ message: "Note cr√©√©e avec succ√®s" });
  } catch (error) {
    console.error("Erreur lors de la cr√©ation de la note:", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
});

// PUT /notes/:title - Mettre √† jour une note
app.put("/notes/:title", async (req, res) => {
  try {
    const { title } = req.params;
    const { content } = req.body;

    if (!content) {
      return res.status(400).json({ error: "Contenu requis" });
    }

    const filename = `${title}.txt`;
    const filepath = path.join(NOTES_DIR, filename);

    await fs.writeFile(filepath, content, "utf8");

    res.json({ message: "Note mise √† jour avec succ√®s" });
  } catch (error) {
    console.error("Erreur lors de la mise √† jour de la note:", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
});

// DELETE /notes/:title - Supprimer une note
app.delete("/notes/:title", async (req, res) => {
  try {
    const { title } = req.params;
    const filename = `${title}.txt`;
    const filepath = path.join(NOTES_DIR, filename);

    await fs.remove(filepath);

    // Supprimer aussi les questions associ√©es
    const questionsFile = path.join(QUESTIONS_DIR, `${title}.json`);
    if (await fs.pathExists(questionsFile)) {
      await fs.remove(questionsFile);
    }

    res.json({ message: "Note supprim√©e avec succ√®s" });
  } catch (error) {
    console.error("Erreur lors de la suppression de la note:", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
});

// Route pour g√©n√©rer des questions avec IA
app.post("/generate-questions", async (req, res) => {
  try {
    const { title, content } = req.body;

    if (!title || !content) {
      return res.status(400).json({ error: "Titre et contenu requis" });
    }

    // Cr√©er un identifiant unique pour cette session
    const sessionId = Date.now();

    // Lire l'historique des questions d√©j√† g√©n√©r√©es pour cette note
    const historyFile = path.join(QUESTIONS_DIR, `${title}.json`);
    let previousQuestions = [];
    if (await fs.pathExists(historyFile)) {
      try {
        const existingData = await fs.readFile(historyFile, "utf8");
        const parsed = JSON.parse(existingData);
        if (Array.isArray(parsed.history)) {
          previousQuestions = parsed.history
            .flat()
            .map((q) => q.text || q.question);
        } else if (Array.isArray(parsed)) {
          previousQuestions = parsed.map((q) => q.text || q.question);
        }
      } catch (e) {
        console.log("Cr√©ation d'un nouvel historique pour", title);
      }
    }

    // Cr√©er les instructions pour √©viter les r√©p√©titions
    const avoidRepetition =
      previousQuestions.length > 0
        ? `\n\nIMPORTANT: √âVITEZ absolument ces questions d√©j√† pos√©es:\n${previousQuestions
            .map((q, i) => `${i + 1}. ${q}`)
            .join(
              "\n"
            )}\n\nG√©n√©rez des questions COMPL√àTEMENT DIFF√âRENTES avec de nouveaux angles d'approche.`
        : "";

    // Ajouter de la variabilit√© pour √©viter les questions r√©p√©titives
    const questionStyles = [
      "questions conceptuelles approfondies",
      "questions d'application pratique",
      "questions d'analyse critique",
      "questions de comparaison et contraste",
      "questions de r√©solution de probl√®mes",
      "questions de r√©flexion personnelle",
      "questions de m√©morisation cibl√©e",
      "questions de synth√®se cr√©ative",
    ];

    const selectedStyles = questionStyles
      .sort(() => Math.random() - 0.5)
      .slice(0, 3);
    const currentTime = new Date().toLocaleString("fr-FR");

    const prompt = `En tant qu'expert p√©dagogique, basez-vous sur cette note "${title}":

CONTENU:
"${content}"

MISSION: Cr√©ez exactement 5 questions d'apprentissage ORIGINALES et UNIQUES.

STYLE DEMAND√â (session ${sessionId}): ${selectedStyles.join(", ")}

CONTRAINTES:
- Questions sp√©cifiques au contenu fourni
- Aucune question g√©n√©rique
- R√©ponses d√©taill√©es et pr√©cises  
- Variez les formulations et approches
- Date/heure: ${currentTime}${avoidRepetition}

FORMAT JSON STRICT:
[
  {
    "text": "Question pr√©cise et sp√©cifique?",
    "reponse": "R√©ponse compl√®te et d√©taill√©e bas√©e sur le contenu"
  }
]

G√©n√©rez maintenant 5 questions INNOVANTES et DIFF√âRENTES:`;

    const messages = [
      {
        role: "system",
        content: `Tu es un g√©n√©rateur de questions p√©dagogiques expert. Tu cr√©es TOUJOURS des questions uniques et originales. Session: ${sessionId}. √âvite absolument toute r√©p√©tition. R√©ponds uniquement en JSON valide.`,
      },
      {
        role: "user",
        content: prompt,
      },
    ];

    const response = await callAIAPI(messages, 1500);

    // Parser la r√©ponse JSON
    let questions;
    try {
      questions = JSON.parse(response);
    } catch (parseError) {
      // Si le parsing √©choue, essayer d'extraire le JSON
      const jsonMatch = response.match(/\[[\s\S]*\]/);
      if (jsonMatch) {
        questions = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error("Format de r√©ponse invalide");
      }
    }

    // Sauvegarder les questions avec historique
    const questionsFile = path.join(QUESTIONS_DIR, `${title}.json`);

    // Charger l'historique existant
    let historyData = { current: questions, history: [] };
    if (await fs.pathExists(questionsFile)) {
      try {
        const existingData = await fs.readFile(questionsFile, "utf8");
        const parsed = JSON.parse(existingData);
        if (parsed.history) {
          historyData.history = parsed.history;
        } else if (Array.isArray(parsed)) {
          historyData.history = [parsed];
        }
      } catch (e) {
        console.log("Cr√©ation d'un nouvel historique");
      }
    }

    // Ajouter les nouvelles questions √† l'historique
    historyData.history.push(questions);
    // Garder seulement les 10 derni√®res g√©n√©rations
    if (historyData.history.length > 10) {
      historyData.history = historyData.history.slice(-10);
    }

    await fs.writeFile(questionsFile, JSON.stringify(historyData, null, 2));

    res.json(questions);
  } catch (error) {
    console.error("Erreur lors de la g√©n√©ration des questions:", error);

    // Mode fallback en cas d'erreur API DeepSeek
    console.warn("üîÑ Activation du mode fallback (questions g√©n√©riques)...");
    try {
      const { title, content } = req.body;
      const fallbackQuestions = generateFallbackQuestions(title, content);

      const questionsFile = path.join(QUESTIONS_DIR, `${title}.json`);
      await fs.writeFile(
        questionsFile,
        JSON.stringify(fallbackQuestions, null, 2)
      );

      res.json(fallbackQuestions);
    } catch (fallbackError) {
      res
        .status(500)
        .json({ error: "Erreur lors de la g√©n√©ration des questions" });
    }
  }
});

// Route pour √©valuer une r√©ponse
app.post("/evaluate-answer", async (req, res) => {
  try {
    const { question, user_answer, correct_answer } = req.body;

    if (!question || !user_answer || !correct_answer) {
      return res.status(400).json({
        error: "Question, r√©ponse utilisateur et r√©ponse correcte requises",
      });
    }

    const prompt = `√âvalue cette r√©ponse d'√©tudiant:

Question: "${question}"
R√©ponse correcte: "${correct_answer}"
R√©ponse de l'√©tudiant: "${user_answer}"

Donne un score de 0 √† 5 bas√© sur:
- Exactitude du contenu (0-2 points)
- Compl√©tude de la r√©ponse (0-2 points)  
- Compr√©hension d√©montr√©e (0-1 point)

R√©ponds uniquement avec un nombre entier entre 0 et 5.`;

    const messages = [
      {
        role: "system",
        content:
          "Tu es un correcteur p√©dagogique expert. Tu √©values les r√©ponses d'√©tudiants de mani√®re juste et constructive. R√©ponds uniquement avec un nombre.",
      },
      {
        role: "user",
        content: prompt,
      },
    ];

    const response = await callAIAPI(messages, 50);

    // Extraire le score num√©rique
    const score = parseInt(response.trim());

    if (isNaN(score) || score < 0 || score > 5) {
      throw new Error("Score invalide re√ßu de l'API");
    }

    res.json({ score });
  } catch (error) {
    console.error("Erreur lors de l'√©valuation:", error);

    // Mode fallback pour l'√©valuation
    console.warn("üîÑ Activation du mode fallback pour l'√©valuation...");
    try {
      const { user_answer, correct_answer } = req.body;
      const fallbackScore = evaluateFallback(user_answer, correct_answer);
      res.json({ score: fallbackScore });
    } catch (fallbackError) {
      res
        .status(500)
        .json({ error: "Erreur lors de l'√©valuation de la r√©ponse" });
    }
  }
});

// Route pour r√©cup√©rer les questions d'une note
app.get("/questions/:title", async (req, res) => {
  try {
    const { title } = req.params;
    const questionsFile = path.join(QUESTIONS_DIR, `${title}.json`);

    if (await fs.pathExists(questionsFile)) {
      const questions = await fs.readJson(questionsFile);
      res.json(questions);
    } else {
      res.json([]);
    }
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des questions:", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
});

// Fonction de g√©n√©ration de questions de secours
function generateFallbackQuestions(title, content) {
  // Extraire des informations sp√©cifiques du contenu
  const sentences = content.split(/[.!?]+/).filter((s) => s.trim().length > 10);
  const words = content.split(/\s+/).filter((word) => word.length > 4);
  const uniqueWords = [...new Set(words)];
  const keyTerms = uniqueWords.slice(0, 8);

  // G√©n√©rer un timestamp pour la variabilit√©
  const timestamp = Date.now();
  const randomSeed = timestamp % 1000;

  // Questions vari√©es bas√©es sur le contenu
  const questionPool = [
    {
      text: `Quels sont les concepts principaux mentionn√©s dans "${title}"?`,
      reponse: `D'apr√®s le contenu, les concepts principaux incluent: ${keyTerms
        .slice(0, 5)
        .join(", ")}. ${
        sentences[0] || "Ces √©l√©ments constituent la base du sujet."
      }`,
    },
    {
      text: `Expliquez en d√©tail ce qui est d√©crit dans "${title}".`,
      reponse: `${
        sentences.slice(0, 2).join(". ") || content.substring(0, 300)
      }. Ceci forme l'essentiel de la compr√©hension du sujet.`,
    },
    {
      text: `Quelles informations importantes peut-on retenir de "${title}"?`,
      reponse: `Les informations importantes incluent: ${
        sentences.slice(1, 3).join(". ") ||
        "les concepts abord√©s dans le contenu"
      }. Ces √©l√©ments sont cruciaux pour la ma√Ætrise du sujet.`,
    },
    {
      text: `Comment d√©finiriez-vous les termes cl√©s de "${title}"?`,
      reponse: `Les termes cl√©s (${keyTerms
        .slice(0, 3)
        .join(", ")}) sont d√©finis dans le contexte suivant: ${
        sentences[2] || content.substring(100, 400)
      }.`,
    },
    {
      text: `Quels sont les aspects pratiques ou applications de ce qui est pr√©sent√© dans "${title}"?`,
      reponse: `Les aspects pratiques incluent l'application des concepts d√©crits. ${
        sentences.slice(-2).join(". ") ||
        "La mise en pratique permet de consolider la compr√©hension."
      }`,
    },
    {
      text: `Pourquoi est-il important de comprendre "${title}"?`,
      reponse: `La compr√©hension de ce sujet est importante car ${
        sentences[1] || "elle permet d'acqu√©rir des connaissances fondamentales"
      }. ${keyTerms
        .slice(3, 6)
        .join(", ")} sont des √©l√©ments essentiels √† ma√Ætriser.`,
    },
    {
      text: `Quels liens peut-on √©tablir entre les diff√©rents √©l√©ments de "${title}"?`,
      reponse: `Les liens entre les √©l√©ments montrent que ${sentences
        .slice(0, 2)
        .join(
          " et que "
        )}. Ces connexions permettent une compr√©hension globale.`,
    },
    {
      text: `Comment pourriez-vous expliquer "${title}" √† quelqu'un qui n'y conna√Æt rien?`,
      reponse: `Pour expliquer simplement: ${content.substring(
        0,
        250
      )}. En r√©sum√©, ${keyTerms
        .slice(0, 4)
        .join(", ")} sont les bases √† comprendre.`,
    },
  ];

  // S√©lectionner 5 questions de mani√®re pseudo-al√©atoire bas√©e sur le timestamp
  const selectedQuestions = [];
  const usedIndices = new Set();

  for (let i = 0; i < 5; i++) {
    let index = (randomSeed + i * 3) % questionPool.length;
    while (usedIndices.has(index)) {
      index = (index + 1) % questionPool.length;
    }
    usedIndices.add(index);
    selectedQuestions.push(questionPool[index]);
  }

  return selectedQuestions;
}

// Fonction d'√©valuation de secours
function evaluateFallback(userAnswer, correctAnswer) {
  if (!userAnswer || userAnswer.trim().length === 0) {
    return 0;
  }

  const userWords = userAnswer.toLowerCase().split(/\s+/);
  const correctWords = correctAnswer.toLowerCase().split(/\s+/);

  // Calculer la correspondance des mots
  let matches = 0;
  userWords.forEach((word) => {
    if (
      correctWords.some(
        (correctWord) =>
          correctWord.includes(word) || word.includes(correctWord)
      )
    ) {
      matches++;
    }
  });

  // Calculer le score bas√© sur la longueur et les correspondances
  const lengthScore = Math.min(userAnswer.length / 50, 2); // Max 2 points pour la longueur
  const matchScore = Math.min((matches / correctWords.length) * 3, 3); // Max 3 points pour les correspondances

  return Math.round(Math.min(lengthScore + matchScore, 5));
}

// ============================================
// ENDPOINTS POUR L'HISTORIQUE DES QUIZ
// ============================================

// Sauvegarder un quiz complet
app.post("/save-quiz", async (req, res) => {
  try {
    const {
      noteTitle,
      questions,
      userAnswers,
      results,
      totalScore,
      averageScore,
    } = req.body;

    if (!noteTitle || !questions || !userAnswers || !results) {
      return res.status(400).json({ error: "Donn√©es du quiz incompl√®tes" });
    }

    // Cr√©er l'objet quiz
    const quiz = {
      id: `${noteTitle}-${Date.now()}`, // ID unique
      noteTitle,
      date: new Date().toISOString(),
      timestamp: Date.now(),
      questions,
      userAnswers,
      results,
      totalScore,
      averageScore,
      questionsCount: questions.length,
      correctAnswers: results.filter((r) => r.isCorrect).length,
    };

    // Sauvegarder dans un fichier JSON
    const filename = `quiz-${quiz.id}.json`;
    const filepath = path.join(QUIZ_HISTORY_DIR, filename);

    await fs.writeJson(filepath, quiz, { spaces: 2 });

    res.json({
      success: true,
      message: "Quiz sauvegard√© avec succ√®s",
      quizId: quiz.id,
    });
  } catch (error) {
    console.error("Erreur lors de la sauvegarde du quiz:", error);
    res.status(500).json({ error: "Erreur serveur lors de la sauvegarde" });
  }
});

// R√©cup√©rer l'historique des quiz
app.get("/quiz-history", async (req, res) => {
  try {
    const files = await fs.readdir(QUIZ_HISTORY_DIR);
    const quizFiles = files.filter(
      (file) => file.startsWith("quiz-") && file.endsWith(".json")
    );

    const quizHistory = [];

    for (const file of quizFiles) {
      try {
        const filepath = path.join(QUIZ_HISTORY_DIR, file);
        const quiz = await fs.readJson(filepath);

        // Ajouter seulement les infos essentielles pour la liste
        quizHistory.push({
          id: quiz.id,
          noteTitle: quiz.noteTitle,
          date: quiz.date,
          timestamp: quiz.timestamp,
          totalScore: quiz.totalScore,
          averageScore: quiz.averageScore,
          questionsCount: quiz.questionsCount,
          correctAnswers: quiz.correctAnswers,
        });
      } catch (fileError) {
        console.warn(`Erreur lecture fichier ${file}:`, fileError);
      }
    }

    // Trier par date (plus r√©cent en premier)
    quizHistory.sort((a, b) => b.timestamp - a.timestamp);

    res.json(quizHistory);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration de l'historique:", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
});

// R√©cup√©rer un quiz sp√©cifique avec tous les d√©tails
app.get("/quiz-history/:quizId", async (req, res) => {
  try {
    const { quizId } = req.params;

    const files = await fs.readdir(QUIZ_HISTORY_DIR);
    const targetFile = files.find((file) => file.includes(quizId));

    if (!targetFile) {
      return res.status(404).json({ error: "Quiz non trouv√©" });
    }

    const filepath = path.join(QUIZ_HISTORY_DIR, targetFile);
    const quiz = await fs.readJson(filepath);

    res.json(quiz);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration du quiz:", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
});

// Supprimer un quiz de l'historique
app.delete("/quiz-history/:quizId", async (req, res) => {
  try {
    const { quizId } = req.params;

    const files = await fs.readdir(QUIZ_HISTORY_DIR);
    const targetFile = files.find((file) => file.includes(quizId));

    if (!targetFile) {
      return res.status(404).json({ error: "Quiz non trouv√©" });
    }

    const filepath = path.join(QUIZ_HISTORY_DIR, targetFile);
    await fs.remove(filepath);

    res.json({ success: true, message: "Quiz supprim√© avec succ√®s" });
  } catch (error) {
    console.error("Erreur lors de la suppression du quiz:", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
});

// Fonction pour cr√©er des notes de d√©monstration
async function createDemoNotes() {
  try {
    // V√©rifier si des notes existent d√©j√†
    const files = await fs.readdir(NOTES_DIR);
    const existingNotes = files.filter((file) => file.endsWith(".txt"));

    if (existingNotes.length > 0) {
      console.log(`üìù ${existingNotes.length} notes existantes trouv√©es`);
      return;
    }

    console.log("üéØ Cr√©ation des notes de d√©monstration...");

    // Notes de d√©monstration
    const demoNotes = [
      {
        title: "Introduction √† JavaScript",
        content: `JavaScript est un langage de programmation polyvalent et dynamique, principalement utilis√© pour le d√©veloppement web. Cr√©√© en 1995 par Brendan Eich, JavaScript est devenu l'un des langages les plus populaires au monde.

Caract√©ristiques principales :
- Langage interpr√©t√© (pas de compilation n√©cessaire)
- Typage dynamique (les variables peuvent changer de type)
- Programmation orient√©e objet et fonctionnelle
- Ex√©cution c√¥t√© client (navigateur) et c√¥t√© serveur (Node.js)

Syntaxe de base :
- Variables : let, const, var
- Fonctions : function, arrow functions
- Conditions : if/else, switch
- Boucles : for, while, forEach

JavaScript permet de cr√©er des applications web interactives, des serveurs web, des applications mobiles, et m√™me des applications desktop.

Exemple simple :
let message = "Bonjour le monde!";
console.log(message);

Les frameworks populaires incluent React, Vue.js, Angular pour le frontend, et Express.js pour le backend.`,
      },
      {
        title: "Les Bases de la Photographie",
        content: `La photographie est l'art de capturer la lumi√®re pour cr√©er des images. Comprendre les bases est essentiel pour am√©liorer vos comp√©tences.

Triangle d'exposition :
1. Ouverture (f/stop) : Contr√¥le la profondeur de champ
   - f/1.4 √† f/2.8 : Grande ouverture, flou d'arri√®re-plan
   - f/8 √† f/11 : Ouverture moyenne, nettet√© √©quilibr√©e
   - f/16 √† f/22 : Petite ouverture, grande profondeur de champ

2. Vitesse d'obturation : Contr√¥le le mouvement
   - 1/500s ou plus : Figer le mouvement
   - 1/60s √† 1/250s : Usage g√©n√©ral
   - 1/30s ou moins : Flou de mouvement cr√©atif

3. ISO : Sensibilit√© √† la lumi√®re
   - ISO 100-400 : Lumi√®re abondante
   - ISO 800-1600 : Lumi√®re mod√©r√©e
   - ISO 3200+ : Faible luminosit√©

R√®gles de composition :
- R√®gle des tiers : Diviser l'image en 9 sections
- Lignes directrices : Guider l'≈ìil vers le sujet
- Cadrage : Utiliser l'environnement pour encadrer le sujet
- Sym√©trie et motifs : Cr√©er un √©quilibre visuel

Types de photographie :
- Portrait : Mettre en valeur les personnes
- Paysage : Capturer la beaut√© naturelle
- Street : Documenter la vie urbaine
- Macro : Photographier les d√©tails

L'√©clairage est crucial : la golden hour (lever/coucher du soleil) offre une lumi√®re douce et chaude, id√©ale pour la plupart des sujets.`,
      },
      {
        title: "Principes de Base du Marketing Digital",
        content: `Le marketing digital englobe toutes les strat√©gies de promotion utilisant les canaux num√©riques pour atteindre les consommateurs.

Composants principaux :

1. SEO (Search Engine Optimization) :
   - Optimisation pour les moteurs de recherche
   - Recherche de mots-cl√©s pertinents
   - Cr√©ation de contenu de qualit√©
   - Optimisation technique du site

2. SEA (Search Engine Advertising) :
   - Publicit√© payante sur Google Ads
   - Ciblage par mots-cl√©s
   - Contr√¥le du budget et des ench√®res
   - Mesure du ROI

3. Social Media Marketing :
   - Pr√©sence sur les r√©seaux sociaux
   - Cr√©ation de contenu engageant
   - Interaction avec la communaut√©
   - Publicit√© sociale cibl√©e

4. Email Marketing :
   - Newsletters personnalis√©es
   - S√©quences d'automatisation
   - Segmentation de la base de donn√©es
   - A/B testing des campagnes

5. Content Marketing :
   - Blogs et articles informatifs
   - Vid√©os et podcasts
   - Infographies et visuels
   - Webinaires et formations

M√©triques importantes :
- Taux de conversion : Pourcentage de visiteurs qui effectuent une action
- Co√ªt par acquisition (CPA) : Co√ªt pour acqu√©rir un client
- Retour sur investissement (ROI) : B√©n√©fice g√©n√©r√© par rapport √† l'investissement
- Taux d'engagement : Interaction avec le contenu

Outils essentiels :
- Google Analytics : Analyse du trafic web
- Google Search Console : Monitoring SEO
- Hootsuite/Buffer : Gestion des r√©seaux sociaux
- Mailchimp : Email marketing
- Canva : Cr√©ation de visuels

Le marketing digital permet un ciblage pr√©cis, une mesure en temps r√©el et une optimisation continue des campagnes.`,
      },
      {
        title: "Histoire de l'Art - Renaissance",
        content: `La Renaissance (14e-16e si√®cles) marque une r√©volution artistique et culturelle majeure, n√©e en Italie et s'√©tendant √† travers l'Europe.

Contexte historique :
- Red√©couverte des textes antiques grecs et romains
- D√©veloppement de l'humanisme
- Prosp√©rit√© √©conomique des cit√©s-√âtats italiennes
- Invention de l'imprimerie (diffusion des id√©es)

Caract√©ristiques artistiques :

1. Techniques innovantes :
   - Perspective lin√©aire : Cr√©ation de profondeur
   - Sfumato : Transitions douces entre couleurs
   - Chiaroscuro : Jeu d'ombres et de lumi√®res
   - Anatomie pr√©cise : √âtude du corps humain

2. Th√®mes privil√©gi√©s :
   - Mythologie antique
   - Portraits individualis√©s
   - Sc√®nes religieuses humanis√©es
   - All√©gories complexes

Grands ma√Ætres :

Leonardo da Vinci (1452-1519) :
- La Joconde : Portrait √©nigmatique
- La C√®ne : Composition dramatique
- Homme de Vitruve : Proportions parfaites

Michel-Ange (1475-1564) :
- David : Sculpture monumentale
- Chapelle Sixtine : Fresques magistrales
- Piet√† : √âmotion dans le marbre

Rapha√´l (1483-1520) :
- √âcole d'Ath√®nes : Philosophie et art
- Madones : Gr√¢ce et beaut√©
- Chambres du Vatican : D√©coration compl√®te

Impact culturel :
- R√©volution dans la repr√©sentation artistique
- D√©veloppement du m√©c√©nat
- √âmergence de l'artiste-intellectuel
- Influence sur l'art europ√©en pendant des si√®cles

La Renaissance √©tablit les fondements de l'art occidental moderne, alliant technique, beaut√© et r√©flexion philosophique.`,
      },
      {
        title: "Nutrition et Alimentation √âquilibr√©e",
        content: `Une alimentation √©quilibr√©e est essentielle pour maintenir une bonne sant√© physique et mentale. Elle fournit √† l'organisme tous les nutriments n√©cessaires √† son bon fonctionnement.

Macronutriments essentiels :

1. Glucides (45-65% des calories) :
   - Source principale d'√©nergie
   - Glucides complexes : C√©r√©ales compl√®tes, l√©gumineuses
   - Glucides simples : Fruits, l√©gumes (√† privil√©gier)
   - √âviter : Sucres raffin√©s, sodas

2. Prot√©ines (10-35% des calories) :
   - Construction et r√©paration des tissus
   - Sources animales : Viande, poisson, ≈ìufs, produits laitiers
   - Sources v√©g√©tales : L√©gumineuses, noix, graines
   - Besoins : 0,8-1g par kg de poids corporel

3. Lipides (20-35% des calories) :
   - Acides gras essentiels
   - Bonnes graisses : Huile d'olive, avocat, noix, poissons gras
   - √Ä limiter : Graisses satur√©es, trans

Micronutriments importants :
- Vitamines : A, C, D, E, K, complexe B
- Min√©raux : Calcium, fer, magn√©sium, zinc
- Antioxydants : Polyph√©nols, carot√©no√Ødes

R√®gles d'or :
1. Vari√©t√© : Manger de tout en quantit√©s mod√©r√©es
2. √âquilibre : R√©partir les apports sur la journ√©e
3. Mod√©ration : √âviter les exc√®s
4. Hydratation : 1,5-2L d'eau par jour
5. R√©gularit√© : Horaires de repas fixes

Conseils pratiques :
- 5 fruits et l√©gumes par jour
- C√©r√©ales compl√®tes privil√©gi√©es
- Poisson 2-3 fois par semaine
- Limiter le sel et le sucre ajout√©
- Cuisson douce pr√©f√©r√©e

Planification des repas :
- Petit-d√©jeuner : 25% des apports
- D√©jeuner : 35% des apports
- Collation : 10% des apports
- D√Æner : 30% des apports

L'alimentation √©quilibr√©e, associ√©e √† l'activit√© physique, pr√©vient de nombreuses maladies chroniques et am√©liore la qualit√© de vie.`,
      },
    ];

    // Cr√©er les fichiers de notes
    for (const note of demoNotes) {
      const filename = `${note.title}.txt`;
      const filepath = path.join(NOTES_DIR, filename);
      await fs.writeFile(filepath, note.content, "utf8");
      console.log(`‚úÖ Note cr√©√©e: ${note.title}`);
    }

    console.log(`üéâ ${demoNotes.length} notes de d√©monstration cr√©√©es avec succ√®s!`);
  } catch (error) {
    console.error("Erreur lors de la cr√©ation des notes de d√©monstration:", error);
  }
}

// Servir les fichiers statiques React en production
if (process.env.NODE_ENV === 'production') {
  app.use(express.static(path.join(__dirname, '..', 'build')));
  
  // Toutes les autres routes retournent le fichier React
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, '..', 'build', 'index.html'));
  });
}

// D√©marrer le serveur
app.listen(PORT, async () => {
  console.log(`Serveur d√©marr√© sur le port ${PORT}`);
  console.log(`API disponible sur http://localhost:${PORT}`);

  // Test de la cl√© API IA
  await testAIAPI();

  // Cr√©ation des notes de d√©monstration
  await createDemoNotes();
});
